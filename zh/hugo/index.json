[{"content":"基础知识补充：\n查看环境变量，也可以cmd下输入set来查看\n查看环境变量，也可以用win32api查看，如下\n远程下载exe，然后执行\nSW_HIDE 是隐藏窗口，而测试的时候，可以用 SH_SHOW 显示窗口，正常会报毒，加壳可以避免一定程度报毒\n除了用 WinExec 外创建进程，还可以用 CreateProcess 创建进程\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; CreateProcess(NULL, \u0026#34;c:/fuff.exe\u0026#34;, NULL, NULL, NULL,NULL,NULL,NULL,\u0026amp;info,\u0026amp;pinfo); } 使用 CreateProcess 时可以设置为挂起状态，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; CreateProcess(NULL, \u0026#34;c:/fuff.exe\u0026#34;, NULL, NULL, NULL,CREATE_SUSPENDED,NULL,NULL,\u0026amp;info,\u0026amp;pinfo); ResumeThread(pinfo.hThread); } 还可以设置DEBUG_PROCESS，这样进程就可以被调试，这样设置后，当前创建进程的子进程也可以被调试，如果设置为 DEBUG_ONLY_THIS_PROCESS 则仅调试当前创建的进程，一般同时指定这两个参数就行，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; CreateProcess(NULL, \u0026#34;c:/fuff.exe\u0026#34;, NULL, NULL, NULL, DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS,NULL,NULL,\u0026amp;info,\u0026amp;pinfo); ResumeThread(pinfo.hThread); } 进程读写，修改游戏内存，以植物大战僵尸为案例\n由于在尝试的时候 findwindow 没有找到窗口（很奇怪），所以直接用spy查找到实际句柄\n然后ce查找内存地址\n最后可以通过 ReadProcessMemory 读取内存地址的值，可以打印出 150 个太阳\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { // HANDLE 窗口句柄 = FindWindow(NULL, \u0026#34;植物大战僵尸中文版\u0026#34;); HWND 窗口句柄 = (HWND)0x002303BC; DWORD p = 0; GetWindowThreadProcessId(窗口句柄, \u0026amp;p); HANDLE hd = OpenProcess(PROCESS_ALL_ACCESS, TRUE, p); int* lp = 0x15F73908; int* num = malloc(4); ReadProcessMemory(hd,lp,num,4,NULL); printf(\u0026#34;%d\u0026#34;, *num); } 修改太阳为 10000\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { // HANDLE 窗口句柄 = FindWindow(NULL, \u0026#34;植物大战僵尸中文版\u0026#34;); HWND 窗口句柄 = (HWND)0x002303BC; DWORD p = 0; GetWindowThreadProcessId(窗口句柄, \u0026amp;p); HANDLE hd = OpenProcess(PROCESS_ALL_ACCESS, TRUE, p); int* lp = 0x15F73908; int* num = malloc(4); ReadProcessMemory(hd, lp, num, 4, NULL); *num = 10000; WriteProcessMemory(hd, lp, num, 4, NULL); printf(\u0026#34;%d\u0026#34;, *num); } 利用 CreateToolhelp32Snapshot 遍历 tasklist 所有进程，CreateToolhelp32Snapshot 相当于把 tasklit 显示出的当前进程截图，然后返回，但CreateToolhelp32Snapshot 返回的进程不是实时的\nCreateToolhelp32Snapshot 可以遍历所有进程，也可以遍历一个进程里面的所有模块或者堆\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;TlHelp32.h\u0026gt; void main() { HANDLE hd = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); PROCESSENTRY32 pe; pe.dwSize = sizeof(pe); Process32First(hd, \u0026amp;pe); while (Process32Next(hd, \u0026amp;pe)) { wprintf(L\u0026#34;%s\t%d\\n\u0026#34;, pe.szExeFile, pe.th32ProcessID); } } 关闭计算器进程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;TlHelp32.h\u0026gt; int main() { char* name = \u0026#34;CalculatorApp.exe\u0026#34;; HANDLE hd = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); PROCESSENTRY32 pe; pe.dwSize = sizeof(pe); Process32First(hd, \u0026amp;pe); while (Process32Next(hd, \u0026amp;pe)) { HANDLE 进程 = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pe.th32ProcessID); if (进程 != NULL) { if (strcmp(name, pe.szExeFile) == 0) { if (TerminateProcess(进程, 0)) { printf(\u0026#34;Terminated process: %s\\n\u0026#34;, pe.szExeFile); } else { DWORD error = GetLastError(); printf(\u0026#34;Failed to terminate process: %lu\\n\u0026#34;, error); } } CloseHandle(进程); } else { DWORD error = GetLastError(); wprintf(L\u0026#34;Failed to open process: %lu, %s\\n\u0026#34;, error, pe.szExeFile); } } CloseHandle(hd); return 0; } 这里关闭失败了，结果如下，5 表示权限不够，可能要提权才能够关闭（不是很清楚）\n打印计算器进程的模块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;TlHelp32.h\u0026gt; void main() { char name[30] = \u0026#34;CalculatorApp.exe\u0026#34;; HANDLE hd = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, NULL); MODULEENTRY32 module; module.dwSize = sizeof(module); Module32First(hd, \u0026amp;module); while (Module32Next(hd, \u0026amp;module)) { wprintf(L\u0026#34;%s\\n\u0026#34;, module.szExePath); } } 编译如下汇编代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 .386 .model flat, stdcall option casemap:none include D:\\masm32\\include\\user32.inc include D:\\masm32\\include\\windows.inc include D:\\masm32\\include\\kernel32.inc .data Err db \u0026#39;乃子哥哥爱吃槟榔\u0026#39;,0 Ok db \u0026#39;乃子哥哥爱看黄色\u0026#39;,0 caption db \u0026#39;乃子哥哥yyds\u0026#39;,0 .code fn proc xor eax,eax .if eax invoke MessageBoxA, NULL, addr Ok, addr caption, MB_OK .elseif invoke MessageBoxA, NULL, addr Err, addr caption, MB_ICONSTOP .endif ret fn endp start: invoke fn invoke ExitProcess, 0 end start 然后用ollylce调试\n注意：\n多次重复用ollylce加载发现je跳转的地址始终不发现变化，pe的exe文件反汇编后开始的地址短时间内不会发生改变。\n但对于dll文件，dll在物理内存中只有一份，dll文件是通过分页机制映射到虚拟内存中的，虚拟地址空间是隔离的，但是如果虚拟内存空间被占用了，那么就需要重定位，所以dll文件反汇编的开始地址并不一定是相同的，可能发生变化，这样我们就需要遍历整个模块的空间来找到起始地址\n但是由于这里是 exe 文件，所以短时间内程序入口地址不会变化，即 0x0059206B 不会变化，所以0x00592040肯定也不会变化，那么如果我们能够读取 0x00592040的地址对应的值1574（小端存储，7415也就是1574），并且修改成 9090 （也就是nop），那么就能够模仿上面在ce 中调试修改的操作，也就相当于补丁\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;tchar.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; if (CreateProcess(_T(\u0026#34;C:\\\\MASM.exe\u0026#34;), NULL, NULL, NULL, NULL, NULL, NULL, NULL, \u0026amp;info, \u0026amp;pinfo)) { printf(\u0026#34;进程创建成功\\n\u0026#34;); } else { DWORD error = GetLastError(); printf(\u0026#34;进程创建失败，错误码: %d\\n\u0026#34;, error); } void* p = 0x00592040; short oldbyte = 0x1574; short* newbyte = malloc(2); HANDLE hd = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pinfo.dwProcessId); ReadProcessMemory(hd, p, newbyte, 2, NULL); if (oldbyte != *newbyte) { printf(\u0026#34;程序版本不对，无法添加补丁\u0026#34;); } else { *newbyte = 0x9090; WriteProcessMemory(hd, p, newbyte, 2, NULL); } } 执行结果如下：\n对 exe 进行upx加壳后，再用OllyICE进行F8单步调试，则发现一直在来回跳，无法继续往下执行（加壳就是防止反调试）\n以前的壳分为两种：\n一种是专门用于把代码压缩，降低可执行文件体积，比如压缩后是 123.exe，那么 123.exe 中当然还有一个解压缩代码 第二种就是对代码进行加密 现在的壳一般同时具备压缩和加密两种特性\n如何对加壳的程序进行打补丁 ？？\n","description":"","id":3,"section":"c","tags":["C"],"title":"进程遍历 | 内存补丁 | win32 api调试","uri":"https://ayuxy.github.io/zh/c/2023-1128-01/"},{"content":"汇编语言是直接工作在硬件之上的语言，首先要了解硬件系统的结构，才能有效应用汇编语言对其编程\n机器语言 ","description":"汇编语言是直接工作在硬件之上的语言，首先要了解硬件系统的结构，才能有效应用汇编语言对其编程","id":4,"section":"asm","tags":["8086汇编"],"title":"8086汇编基础","uri":"https://ayuxy.github.io/zh/asm/8086/2023-1121-05/"},{"content":"因 zzo 主题的原作者已停止更新，所以本文主要记录 zzo 主题的修复以及一些优化。由于不擅长前端，所以部分修复和优化代码可能存在一些问题\n添加自定义CSS文件 修改 params.toml 文件，如下：\n1 custom_css = [\u0026#34;scss/_custom.scss\u0026#34;] 在 assets/scss 下新建 _custom.scss 文件\n优化TOC 当 tocPosition = \u0026ldquo;outer\u0026rdquo; 时，如下，对 TOC 位置进行调整\n在 _custom.scss 文件中添加如下内容\n1 2 3 .toc[data-dir=ltr] { padding-left: 1.5rem !important; } 注：如果不想在 _custom.scss 修改，也可以修改 themes\\zzo\\assets\\sass\\components\\_toc.scss 文件的如下内容\n1 2 3 \u0026amp;[data-dir=\u0026#34;rtl\u0026#34;] { padding-right: 0.5rem; } 修改为\n1 2 3 \u0026amp;[data-dir=\u0026#34;rtl\u0026#34;] { padding-right: 1.5rem; } 优化文章内容样式 修改标签 在 _custom.scss 添加如下内容：\n1 2 3 4 .single__meta{ flex-direction: column !important; align-items: flex-start !important; } 修改 blockquote 在 _custom.scss 添加如下内容：\n1 2 3 4 .single__contents[data-dir=ltr] blockquote { margin: 0 0.5rem 1rem 0.5rem !important; padding: 0 0 0 1rem !important; } 修改段落间距 在 _custom.scss 添加如下内容：\n1 2 3 4 .single__contents p { margin: 0 0 1rem !important; padding: 0; } 修改主页样式 修改间距 在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 .caption{ margin-top: 0.75rem !important; } .summary-classic__text { margin-top: 0.75rem !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .summary-classic:not(:last-child) hr{ margin-bottom: 0.75rem !important; } 修改📌位置 修改 layouts/partials/summary/classic.html 里面的如下内容\n1 \u0026lt;h5 class=\u0026#34;title h5\u0026#34;\u0026gt;\u0026lt;a href=\u0026#39;{{ .Permalink }}\u0026#39;\u0026gt;{{- with .Params.pinned -}}{{ ($.Site.Params.pinIcon | safeHTML) | default \u0026#34;📌\u0026#34; }}\u0026amp;nbsp;{{- end -}}{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/h5\u0026gt; 修改为如下\n1 \u0026lt;h5 class=\u0026#34;title h5\u0026#34;\u0026gt;\u0026lt;a href=\u0026#39;{{ .Permalink }}\u0026#39;\u0026gt;{{ .Title }}{{- with .Params.pinned -}}\u0026amp;nbsp;{{ ($.Site.Params.pinIcon | safeHTML) | default \u0026#34;📌\u0026#34; }}{{- end -}}\u0026lt;/a\u0026gt; \u0026lt;/h5\u0026gt; 修改archive页 修改 layouts/archive/list.html 里面的如下内容：\n1 2 3 \u0026lt;div class=\u0026#34;px py p2 single__contents\u0026#34;\u0026gt; {{ .Content }} \u0026lt;/div\u0026gt; 修改为如下\n1 2 3 4 5 {{ with .Content }} \u0026lt;div class=\u0026#34;px py p2 single__contents\u0026#34;\u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} 修复英文溢出问题 https://www.runoob.com/w3cnote/css-nowrap-break-word.html\n在 _custom.scss 添加如下内容：\n1 2 3 .single__tags{ word-break:break-all !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .list__sidebar[data-dir=ltr]{ word-break:break-all !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .summary-classic__content{ word-break:break-all !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .toc{ word-break:break-all !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .terms__list{ word-break:break-all !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .archive__li{ word-break:break-all !important; } 在 _custom.scss 添加如下内容：\n1 2 3 .basicflex-column{ word-break:break-all !important; } 处理图片问题 a 标签嵌套图片导致整体容器高度变大\n修复上面的问题，在 _custom.scss 添加如下内容：\n1 2 3 .summary-classic__image[data-ani=true]{ vertical-align: middle; }\t修复后如下：\n如果使用 svg 图片，且 svg 图片比较小，那么显示如下：\n为了让 svg 图片铺满容器，可以在 _custom.scss 添加如下内容：\n1 2 3 4 .summary-classic__image[data-ani=true]{ width: 100%; height: 100%;\t}\t侧边栏修改 修改最近发布文章 修改 posts-by-order.html 文件，修改后如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 {{ if ($.Param \u0026#34;enableSidebarPostsByOrder\u0026#34; | default false) }} {{ $filteredSections := .Site.Pages }} {{ range $.Param \u0026#34;notAllowedTypesInHomeSidebar\u0026#34; }} {{ $filteredSections = (where $filteredSections \u0026#34;Type\u0026#34; \u0026#34;!=\u0026#34; (lower .)) }} {{ end }} {{ $hasOrder := false }} {{ range first ($.Param \u0026#34;itemsPerCategory\u0026#34;) ($filteredSections.ByParam \u0026#34;order\u0026#34;) }} {{ if .Params.order }} {{ $hasOrder = true }} {{ end }} {{ end }} {{ if $hasOrder }} \u0026lt;div class=\u0026#34;sidebar-recent__title p2\u0026#34;\u0026gt;{{ i18n \u0026#34;posts-by-order\u0026#34; | default \u0026#34;TOP POSTS\u0026#34; }}\u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026#34;sidebar-recent__ul\u0026#34;\u0026gt; {{ $orderedSections := (first ($.Param \u0026#34;itemsPerCategory\u0026#34;) ($filteredSections.ByParam \u0026#34;order\u0026#34;)) }} {{ range first ($.Param \u0026#34;itemsPerCategory\u0026#34;) $orderedSections.ByLastmod.Reverse }} {{ if .Params.order }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{{ .RelPermalink }}\u0026#34; class=\u0026#34;sidebar-recent__a p2\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; {{ end }} {{ end }}\t\u0026lt;/ul\u0026gt; \u0026lt;hr class=\u0026#34;hr-fade sidebar-hr\u0026#34; /\u0026gt; {{ end }} {{ end }} 除此之外，还要修改 archetypes/default.md 文件为每篇文章添加上 order : true 参数\n通过 params.toml 文件里的 itemsPerCategory = 5 参数来控制最近更新文章的篇数\n修改Recently update间距 在 _custom.scss 添加如下内容：\n1 2 3 .sidebar-recent__title:nth-child(2).p2 { margin-top: 1.5rem; } 为文章里图片添加边框 在 _custom.scss 添加如下内容：\n1 2 3 .single__contents img { border: 1px solid #dfdfdf; } 修改摘要 当摘要长度超过2行的时候用省略号表示\n而当屏幕宽度小于 769 时，摘要超过1行的时候用省略号表示\n首先在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 7 .summary-classic__text { overflow:hidden; text-overflow:ellipsis; display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; } 但是上面的 css 在 Webkit 浏览器内核下有作用，所以为了兼容其它浏览器内核，使用 clamp.js 实现，引入 clamp.js 后，在 _custom.js 下添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 document.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function() { var paragraphs = document.querySelectorAll(\u0026#39;.summary-classic__text.p2\u0026#39;); // 判断屏幕宽度是否小于或等于 769 像素 if (window.matchMedia(\u0026#39;(max-width: 769px)\u0026#39;).matches) { // 屏幕宽度小于或等于 769px，设置 clamp 为 1 paragraphs.forEach(function(paragraph) { $clamp(paragraph, { clamp: 1, useNativeClamp: false, animate: false }); }); } else { // 屏幕宽度大于 769px，设置 clamp 为 2 paragraphs.forEach(function(paragraph) { $clamp(paragraph, { clamp: 2, useNativeClamp: false, animate: false }); }); } }); 修改间距 在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 .list__main\u0026gt; .summary__container \u0026gt; .summary-classic:first-child \u0026gt; .summary-classic__flex-box { margin-top: 1.75rem; } .list__header--desc{ padding: 0rem !important; } 修改手机下首页图片显示效果 当屏幕宽度小于 769 的时候，不显示图片，在 _custom.js 中添加如下内容：\n1 2 3 4 5 6 7 8 9 10 var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; // 如果屏幕宽度小于769，则删除元素 if (screenWidth \u0026lt; 769) { // 获取所有.summary-classic__image-container元素 var elementsToRemove = document.querySelectorAll(\u0026#39;.summary-classic__image-container\u0026#39;); // 遍历所有元素并删除它们 elementsToRemove.forEach(function (element) { element.parentNode.removeChild(element); }); 修改文章中图片清晰度 参考：https://gohugo.io/templates/render-hooks/\n在 themes\\zzo\\layouts\\_default\\ 里面新建 _markup\\render-image.html 文件，在里面添加如下内容：\n1 2 3 4 5 6 7 8 9 10 \u0026lt;div class=\u0026#34;custom-image-container\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ .Destination | safeURL }}\u0026#34; alt=\u0026#34;{{ .Text }}\u0026#34; {{ with .Title }}title=\u0026#34;{{ . }}\u0026#34;{{ end }} class=\u0026#34;custom-image-class lazyload\u0026#34; data-srcset=\u0026#34;{{ .Destination | safeURL }} 1.25x\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; 修改前：\n修改后：\n修改面包屑溢出 添加滑动条，在 _custom.scss 添加如下内容：\n1 2 3 .breadcrumb{ overflow-x:auto; } 处理 hugo server 警告 处理第一个告警，打开 _default/config.toml 文件，删除 [outputs] 下的：\n1 taxonomyTerm = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;, \u0026#34;SearchIndex\u0026#34;] 处理第二个告警，修改 _default/languages.toml，修改后文件如下：\n1 2 3 4 5 6 7 [zh] title = \u0026#34;Ayuxy\u0026#39;s Blog\u0026#34; languageName = \u0026#34;中文\u0026#34; weight = 1 contentdir = \u0026#34;content\u0026#34; [zh.params] languagedir = \u0026#34;ltr\u0026#34; 处理 minItemsToShowInTagCloud 参数 minItemsToShowInTagCloud 同时控制了侧边栏中系列、标签、分类中文章的最少数量，如果minItemsToShowInTagCloud=2，那么只有当系列、标签、分类中的文章数量至少为 2 的时候才会显示在侧边栏\n进行修改，让 minItemsToShowInTagCloud 控制标签，新增 minItemsToShowInCategoriesCloud 控制分类，新增 minItemsToShowInSeriesCloud 控制分类，\n修改 layouts/partials/taxonomy/taxonomy-categories.html 里面的 minItemsToShowInTagCloud 为 minItemsToShowInCategoriesCloud\n修改 layouts/partials/taxonomy/taxonomy-series.html 里面的 minItemsToShowInTagCloud 为 minItemsToShowInSeriesCloud\n同时在 param.toml 添加\n1 2 minItemsToShowInSeriesCloud = 5 minItemsToShowInCategoriesCloud = 3 在系列、标签、分类后面添加上相关的值，也就是配置文件里面 minItemsToShowInSeriesCloud 、 minItemsToShowInTagCloud 、minItemsToShowInCategoriesCloud 的值\n修改 layouts/partials/taxonomy/taxonomy-series.html 文件，在 {{ i18n \u0026ldquo;series\u0026rdquo; }} 后面添加上如下：\n1 {{ with .Site.Params.minItemsToShowInSeriesCloud }} ({{ . }}) {{ end }} 其它的 taxonomy-categories.html 、taxonomy-tags.html 文件同理\n修改文章标题间距 在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 7 .single__contents h2{ margin: 3rem 0 1.5rem !important; } .single__contents h3 { margin: 2rem 0 1.25rem !important; } 修改字体 添加 data/font.toml，内容如下：\n1 2 title_font = \u0026#34;\\\u0026#34;LXGWWenKaiScreen\\\u0026#34;, sans-serif\u0026#34; content_font = \u0026#34;\\\u0026#34;LXGWWenKaiScreen\\\u0026#34;, sans-serif\u0026#34; 添加 assets\\scss\\font.css 文件，内容如下：\n1 2 3 4 5 @font-face { font-family: \u0026#39;LXGWWenKaiScreen\u0026#39;; src: url(\u0026#39;../fonts/LXGWWenKaiScreen.ttf\u0026#39;); font-style: normal; } 最后在 params.toml 文件中引入 font.css\n修改手机下间距 在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 7 8 9 @media only screen and (max-width: 769px) { .caption { margin-top: 0.5rem !important; } .summary-classic__text { margin-top: 0.5rem !important; } } 手机下允许在单词内换行 在 _custom.scss 添加如下内容：\n1 2 3 4 5 @media only screen and (max-width: 769px) { .single__contents p { word-break: break-all; } } 修改 archive 页细节 在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 .archive__type { padding-left: 5px; padding-right: 5px;\t} @media only screen and (min-width: 769px) { .archive__meta{ margin-top: 2.5px; } } .archive__key { width: 120px !important; } .archive__meta { min-width: 120px !important; max-width: 120px !important; } .archive__type { max-width: 70px !important; min-width: 70px !important;\t} 修改手机下的显示问题 对其修改，希望超出的部分不换行，而是左右滑动，在 _custom.scss 添加如下内容：\n1 2 3 4 5 6 7 8 9 10 11 @media only screen and (max-width: 769px) { .summary-classic__content{ overflow-x: auto; scrollbar-width: none; -ms-overflow-style: none; white-space: nowrap; } .summary-classic__content::-webkit-scrollbar { display: none; } } 添加后如下，可以左右欢动，但是摘要部分被截断了\n这是因为我们之前在_custom.scss 添加了如下内容：`\n1 2 3 4 5 6 7 .summary-classic__text { overflow:hidden; text-overflow:ellipsis; display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; } 将其修改为如下即可\n1 2 3 4 5 6 7 8 9 @media only screen and (min-width: 769px) { .summary-classic__text { overflow:hidden; text-overflow:ellipsis; display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; } } 修改后最终显示如下：\n","description":"本文主要记录 zzo 主题的修复以及一些优化","id":5,"section":"hugo","tags":["hugo"],"title":"博客优化","uri":"https://ayuxy.github.io/zh/hugo/2023-1120-01/"}]