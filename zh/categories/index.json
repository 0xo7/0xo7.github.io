[{"content":"基础知识补充：\n查看环境变量，也可以cmd下输入set来查看\n查看环境变量，也可以用win32api查看，如下\n远程下载exe，然后执行\nSW_HIDE 是隐藏窗口，而测试的时候，可以用 SH_SHOW 显示窗口，正常会报毒，加壳可以避免一定程度报毒\n除了用 WinExec 外创建进程，还可以用 CreateProcess 创建进程\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; CreateProcess(NULL, \u0026#34;c:/fuff.exe\u0026#34;, NULL, NULL, NULL,NULL,NULL,NULL,\u0026amp;info,\u0026amp;pinfo); } 使用 CreateProcess 时可以设置为挂起状态，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; CreateProcess(NULL, \u0026#34;c:/fuff.exe\u0026#34;, NULL, NULL, NULL,CREATE_SUSPENDED,NULL,NULL,\u0026amp;info,\u0026amp;pinfo); ResumeThread(pinfo.hThread); } 还可以设置DEBUG_PROCESS，这样进程就可以被调试，这样设置后，当前创建进程的子进程也可以被调试，如果设置为 DEBUG_ONLY_THIS_PROCESS 则仅调试当前创建的进程，一般同时指定这两个参数就行，如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; CreateProcess(NULL, \u0026#34;c:/fuff.exe\u0026#34;, NULL, NULL, NULL, DEBUG_PROCESS | DEBUG_ONLY_THIS_PROCESS,NULL,NULL,\u0026amp;info,\u0026amp;pinfo); ResumeThread(pinfo.hThread); } 进程读写，修改游戏内存，以植物大战僵尸为案例\n由于在尝试的时候 findwindow 没有找到窗口（很奇怪），所以直接用spy查找到实际句柄\n然后ce查找内存地址\n最后可以通过 ReadProcessMemory 读取内存地址的值，可以打印出 150 个太阳\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { // HANDLE 窗口句柄 = FindWindow(NULL, \u0026#34;植物大战僵尸中文版\u0026#34;); HWND 窗口句柄 = (HWND)0x002303BC; DWORD p = 0; GetWindowThreadProcessId(窗口句柄, \u0026amp;p); HANDLE hd = OpenProcess(PROCESS_ALL_ACCESS, TRUE, p); int* lp = 0x15F73908; int* num = malloc(4); ReadProcessMemory(hd,lp,num,4,NULL); printf(\u0026#34;%d\u0026#34;, *num); } 修改太阳为 10000\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; void main() { // HANDLE 窗口句柄 = FindWindow(NULL, \u0026#34;植物大战僵尸中文版\u0026#34;); HWND 窗口句柄 = (HWND)0x002303BC; DWORD p = 0; GetWindowThreadProcessId(窗口句柄, \u0026amp;p); HANDLE hd = OpenProcess(PROCESS_ALL_ACCESS, TRUE, p); int* lp = 0x15F73908; int* num = malloc(4); ReadProcessMemory(hd, lp, num, 4, NULL); *num = 10000; WriteProcessMemory(hd, lp, num, 4, NULL); printf(\u0026#34;%d\u0026#34;, *num); } 利用 CreateToolhelp32Snapshot 遍历 tasklist 所有进程，CreateToolhelp32Snapshot 相当于把 tasklit 显示出的当前进程截图，然后返回，但CreateToolhelp32Snapshot 返回的进程不是实时的\nCreateToolhelp32Snapshot 可以遍历所有进程，也可以遍历一个进程里面的所有模块或者堆\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;TlHelp32.h\u0026gt; void main() { HANDLE hd = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); PROCESSENTRY32 pe; pe.dwSize = sizeof(pe); Process32First(hd, \u0026amp;pe); while (Process32Next(hd, \u0026amp;pe)) { wprintf(L\u0026#34;%s\t%d\\n\u0026#34;, pe.szExeFile, pe.th32ProcessID); } } 关闭计算器进程\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;TlHelp32.h\u0026gt; int main() { char* name = \u0026#34;CalculatorApp.exe\u0026#34;; HANDLE hd = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0); PROCESSENTRY32 pe; pe.dwSize = sizeof(pe); Process32First(hd, \u0026amp;pe); while (Process32Next(hd, \u0026amp;pe)) { HANDLE 进程 = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pe.th32ProcessID); if (进程 != NULL) { if (strcmp(name, pe.szExeFile) == 0) { if (TerminateProcess(进程, 0)) { printf(\u0026#34;Terminated process: %s\\n\u0026#34;, pe.szExeFile); } else { DWORD error = GetLastError(); printf(\u0026#34;Failed to terminate process: %lu\\n\u0026#34;, error); } } CloseHandle(进程); } else { DWORD error = GetLastError(); wprintf(L\u0026#34;Failed to open process: %lu, %s\\n\u0026#34;, error, pe.szExeFile); } } CloseHandle(hd); return 0; } 这里关闭失败了，结果如下，5 表示权限不够，可能要提权才能够关闭（不是很清楚）\n打印计算器进程的模块\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;TlHelp32.h\u0026gt; void main() { char name[30] = \u0026#34;CalculatorApp.exe\u0026#34;; HANDLE hd = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE, NULL); MODULEENTRY32 module; module.dwSize = sizeof(module); Module32First(hd, \u0026amp;module); while (Module32Next(hd, \u0026amp;module)) { wprintf(L\u0026#34;%s\\n\u0026#34;, module.szExePath); } } 编译如下汇编代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 .386 .model flat, stdcall option casemap:none include D:\\masm32\\include\\user32.inc include D:\\masm32\\include\\windows.inc include D:\\masm32\\include\\kernel32.inc .data Err db \u0026#39;乃子哥哥爱吃槟榔\u0026#39;,0 Ok db \u0026#39;乃子哥哥爱看黄色\u0026#39;,0 caption db \u0026#39;乃子哥哥yyds\u0026#39;,0 .code fn proc xor eax,eax .if eax invoke MessageBoxA, NULL, addr Ok, addr caption, MB_OK .elseif invoke MessageBoxA, NULL, addr Err, addr caption, MB_ICONSTOP .endif ret fn endp start: invoke fn invoke ExitProcess, 0 end start 然后用ollylce调试\n注意：\n多次重复用ollylce加载发现je跳转的地址始终不发现变化，pe的exe文件反汇编后开始的地址短时间内不会发生改变。\n但对于dll文件，dll在物理内存中只有一份，dll文件是通过分页机制映射到虚拟内存中的，虚拟地址空间是隔离的，但是如果虚拟内存空间被占用了，那么就需要重定位，所以dll文件反汇编的开始地址并不一定是相同的，可能发生变化，这样我们就需要遍历整个模块的空间来找到起始地址\n但是由于这里是 exe 文件，所以短时间内程序入口地址不会变化，即 0x0059206B 不会变化，所以0x00592040肯定也不会变化，那么如果我们能够读取 0x00592040的地址对应的值1574（小端存储，7415也就是1574），并且修改成 9090 （也就是nop），那么就能够模仿上面在ce 中调试修改的操作，也就相当于补丁\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 #define _CRT_SECURE_NO_WARNINGS #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;Windows.h\u0026gt; #include \u0026lt;tchar.h\u0026gt; void main() { STARTUPINFO info; GetStartupInfo(\u0026amp;info); PROCESS_INFORMATION pinfo; if (CreateProcess(_T(\u0026#34;C:\\\\MASM.exe\u0026#34;), NULL, NULL, NULL, NULL, NULL, NULL, NULL, \u0026amp;info, \u0026amp;pinfo)) { printf(\u0026#34;进程创建成功\\n\u0026#34;); } else { DWORD error = GetLastError(); printf(\u0026#34;进程创建失败，错误码: %d\\n\u0026#34;, error); } void* p = 0x00592040; short oldbyte = 0x1574; short* newbyte = malloc(2); HANDLE hd = OpenProcess(PROCESS_ALL_ACCESS, TRUE, pinfo.dwProcessId); ReadProcessMemory(hd, p, newbyte, 2, NULL); if (oldbyte != *newbyte) { printf(\u0026#34;程序版本不对，无法添加补丁\u0026#34;); } else { *newbyte = 0x9090; WriteProcessMemory(hd, p, newbyte, 2, NULL); } } 执行结果如下：\n对 exe 进行upx加壳后，再用OllyICE进行F8单步调试，则发现一直在来回跳，无法继续往下执行（加壳就是防止反调试）\n以前的壳分为两种：\n一种是专门用于把代码压缩，降低可执行文件体积，比如压缩后是 123.exe，那么 123.exe 中当然还有一个解压缩代码 第二种就是对代码进行加密 现在的壳一般同时具备压缩和加密两种特性\n如何对加壳的程序进行打补丁 ？？\n把加壳后的程序拖入调试器，显示如下：\n解压缩代码的最后有一个跳转\n执行完解压缩代码后，进行跳转，再执行原本的程序\n如果直接跳过运行这段解压缩代码，直接从最后 jmp 开始执行\n最后结果如下，发现无法跳转到原来的程序中，所以解压缩代码无法跳过\n但是如果我们运行完解压缩代码后，再执行 jmp 跳转，那么就可以跳转到原来的程序中\n可以利用上面的思路，编写代码模拟上面调试器的过程，当解压缩代码执行完，然后跳转到原来的程序中后，再进行打补丁\n具体代码如下：\n","description":"","id":3,"section":"c","tags":["C"],"title":"进程遍历 | 内存补丁 | win32 api调试","uri":"https://ayuxy.github.io/zh/c/2023-1128-01/"},{"content":"汇编语言是直接工作在硬件之上的语言，首先要了解硬件系统的结构，才能有效应用汇编语言对其编程\n机器语言 ","description":"汇编语言是直接工作在硬件之上的语言，首先要了解硬件系统的结构，才能有效应用汇编语言对其编程","id":4,"section":"asm","tags":["8086汇编"],"title":"8086汇编基础","uri":"https://ayuxy.github.io/zh/asm/8086/2023-1121-05/"},{"content":"因 zzo 主题的原作者已停止更新，所以本文主要记录 zzo 主题的修复以及一些优化。由于不擅长前端，所以部分修复和优化代码可能存在一些问题\nUnlock to view this content.\r## 添加自定义CSS文件 修改 params.toml 文件，如下： ```toml custom_css = [\"scss/_custom.scss\"] ``` 在 assets/scss 下新建 _custom.scss 文件 ## 优化TOC 当 tocPosition = \"outer\" 时，如下，对 TOC 位置进行调整 ![image-20231119121701559](image-20231119121701559.png) 在 _custom.scss 文件中添加如下内容 ```SCSS .toc[data-dir=ltr] { padding-left: 1.5rem !important; } ``` 注：如果不想在 _custom.scss 修改，也可以修改 themes\\zzo\\assets\\sass\\components\\\\\\_toc.scss 文件的如下内容 ```scss \u0026[data-dir=\"rtl\"] { padding-right: 0.5rem; } ``` 修改为 ```SCSS \u0026[data-dir=\"rtl\"] { padding-right: 1.5rem; } ``` ## 优化文章内容样式 ### 修改标签 ![image-20231119140637602](image-20231119140637602.png) 在 _custom.scss 添加如下内容： ```SCSS .single__meta{ flex-direction: column !important; align-items: flex-start !important; } ``` ### 修改 blockquote 在 _custom.scss 添加如下内容： ```scss .single__contents[data-dir=ltr] blockquote { margin: 0 0.5rem 1rem 0.5rem !important; padding: 0 0 0 1rem !important; } ``` ### 修改段落间距 在 _custom.scss 添加如下内容： ```scss .single__contents p { margin: 0 0 1rem !important; padding: 0; } ``` ## 修改主页样式 ### 修改间距 ![image-20231119140812400](image-20231119140812400.png) 在 _custom.scss 添加如下内容： ```scss .caption{ margin-top: 0.75rem !important; } .summary-classic__text { margin-top: 0.75rem !important; } ``` ![image-20231119141946106](image-20231119141946106.png) 在 _custom.scss 添加如下内容： ```SCSS .summary-classic:not(:last-child) hr{ margin-bottom: 0.75rem !important; } ``` ### 修改📌位置 修改 layouts/partials/summary/classic.html 里面的如下内容 ```html {{- with .Params.pinned -}}{{ ($.Site.Params.pinIcon | safeHTML) | default \"📌\" }}\u0026nbsp;{{- end -}}{{ .Title }} ``` 修改为如下 ```html {{ .Title }}{{- with .Params.pinned -}}\u0026nbsp;{{ ($.Site.Params.pinIcon | safeHTML) | default \"📌\" }}{{- end -}} ``` ## 修改archive页 修改 layouts/archive/list.html 里面的如下内容： ```html {{ .Content }} ``` 修改为如下 ```html {{ with .Content }} {{ . }} {{ end }} ``` ## 修复英文溢出问题 https://www.runoob.com/w3cnote/css-nowrap-break-word.html ![image-20231119180450709](image-20231119180450709.png) 在 _custom.scss 添加如下内容： ```scss .single__tags{ word-break:break-all !important; } ``` ![image-20231119204939141](image-20231119204939141.png) 在 _custom.scss 添加如下内容： ```scss .list__sidebar[data-dir=ltr]{ word-break:break-all !important; } ``` ![image-20231119203626340](image-20231119203626340.png) 在 _custom.scss 添加如下内容： ```scss .summary-classic__content{ word-break:break-all !important; } ``` ![image-20231119222935597](image-20231119222935597.png) 在 _custom.scss 添加如下内容： ```scss .toc{ word-break:break-all !important; } ``` ![image-20231120092259118](image-20231120092259118.png) 在 _custom.scss 添加如下内容： ```scss .terms__list{ word-break:break-all !important; } ``` ![image-20231120094908404](image-20231120094908404.png) 在 _custom.scss 添加如下内容： ```SCSS .archive__li{ word-break:break-all !important; } ``` ![image-20231120095018955](image-20231120095018955.png) 在 _custom.scss 添加如下内容： ```SCSS .basicflex-column{ word-break:break-all !important; } ``` ## 处理图片问题 a 标签嵌套图片导致整体容器高度变大 ![image-20231120171915476](image-20231120171915476.png) ![image-20231120172112981](image-20231120172112981.png) 修复上面的问题，在 _custom.scss 添加如下内容： ```scss .summary-classic__image[data-ani=true]{ vertical-align: middle; }\t``` 修复后如下： ![image-20231120172003195](image-20231120172003195.png) ![image-20231120172244279](image-20231120172244279.png) 如果使用 svg 图片，且 svg 图片比较小，那么显示如下： ![image-20231120173322830](image-20231120173322830.png) 为了让 svg 图片铺满容器，可以在 _custom.scss 添加如下内容： ```scss .summary-classic__image[data-ani=true]{ width: 100%; height: 100%;\t}\t``` ## 侧边栏修改 ### 修改最近发布文章 ![image-20231121163936995](image-20231121163936995.png) 修改 posts-by-order.html 文件，修改后如下 ```html {{ if ($.Param \"enableSidebarPostsByOrder\" | default false) }} {{ $filteredSections := .Site.Pages }} {{ range $.Param \"notAllowedTypesInHomeSidebar\" }} {{ $filteredSections = (where $filteredSections \"Type\" \"!=\" (lower .)) }} {{ end }} {{ $hasOrder := false }} {{ range first ($.Param \"itemsPerCategory\") ($filteredSections.ByParam \"order\") }} {{ if .Params.order }} {{ $hasOrder = true }} {{ end }} {{ end }} {{ if $hasOrder }} {{ i18n \"posts-by-order\" | default \"TOP POSTS\" }} {{ $orderedSections := (first ($.Param \"itemsPerCategory\") ($filteredSections.ByParam \"order\")) }} {{ range first ($.Param \"itemsPerCategory\") $orderedSections.ByLastmod.Reverse }} {{ if .Params.order }} {{ .Title }} {{ end }} {{ end }}\t{{ end }} {{ end }} ``` 除此之外，还要修改 archetypes/default.md 文件为每篇文章添加上 order : true 参数 通过 params.toml 文件里的 itemsPerCategory = 5 参数来控制最近更新文章的篇数 ## 修改Recently update间距 ![image-20231121202338271](image-20231121202338271.png) 在 _custom.scss 添加如下内容： ```scss .sidebar-recent__title:nth-child(2).p2 { margin-top: 1.5rem; } ``` ## ~~为文章里图片添加边框~~ 在 _custom.scss 添加如下内容： ```scss .single__contents img { border: 1px solid #dfdfdf; } ``` ## 修改摘要 当摘要长度超过2行的时候用省略号表示 ![image-20231122173202863](image-20231122173202863.png) 而当屏幕宽度小于 769 时，摘要超过1行的时候用省略号表示 首先在 _custom.scss 添加如下内容： ```scss .summary-classic__text { overflow:hidden; text-overflow:ellipsis; display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; } ``` 但是上面的 css 在 Webkit 浏览器内核下有作用，所以为了兼容其它浏览器内核，使用 clamp.js 实现，引入 clamp.js 后，在 _custom.js 下添加如下内容： ```js document.addEventListener('DOMContentLoaded', function() { var paragraphs = document.querySelectorAll('.summary-classic__text.p2'); // 判断屏幕宽度是否小于或等于 769 像素 if (window.matchMedia('(max-width: 769px)').matches) { // 屏幕宽度小于或等于 769px，设置 clamp 为 1 paragraphs.forEach(function(paragraph) { $clamp(paragraph, { clamp: 1, useNativeClamp: false, animate: false }); }); } else { // 屏幕宽度大于 769px，设置 clamp 为 2 paragraphs.forEach(function(paragraph) { $clamp(paragraph, { clamp: 2, useNativeClamp: false, animate: false }); }); } }); ``` ## 修改间距 ![image-20231122205830454](image-20231122205830454.png) ![image-20231122205857022](image-20231122205857022.png) 在 _custom.scss 添加如下内容： ```scss .list__main\u003e .summary__container \u003e .summary-classic:first-child \u003e .summary-classic__flex-box { margin-top: 1.75rem; } .list__header--desc{ padding: 0rem !important; } ``` ## ~~修改手机下首页图片显示效果~~ ![image-20231123170003238](image-20231123170003238.png) 当屏幕宽度小于 769 的时候，不显示图片，在 _custom.js 中添加如下内容： ```js var screenWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; // 如果屏幕宽度小于769，则删除元素 if (screenWidth \u003c 769) { // 获取所有.summary-classic__image-container元素 var elementsToRemove = document.querySelectorAll('.summary-classic__image-container'); // 遍历所有元素并删除它们 elementsToRemove.forEach(function (element) { element.parentNode.removeChild(element); }); ``` ## 修改文章中图片清晰度 参考：https://gohugo.io/templates/render-hooks/ 在 themes\\zzo\\layouts\\\\\\_default\\ 里面新建 _markup\\render-image.html 文件，在里面添加如下内容： ```html ``` 修改前： ![image-20231123171538794](image-20231123171538794.png) 修改后： ![image-20231123171514829](image-20231123171514829.png) ## 修改面包屑溢出 ![image-20231123171852669](image-20231123171852669.png) 添加滑动条，在 _custom.scss 添加如下内容： ```scss .breadcrumb{ overflow-x:auto; } ``` ## 处理 hugo server 警告 ![image-20231123212332689](image-20231123212332689.png) 处理第一个告警，打开 _default/config.toml 文件，删除 [outputs] 下的： ```toml taxonomyTerm = [\"HTML\", \"RSS\", \"SearchIndex\"] ``` 处理第二个告警，修改 _default/languages.toml，修改后文件如下： ```toml [zh] title = \"Ayuxy's Blog\" languageName = \"中文\" weight = 1 contentdir = \"content\" [zh.params] languagedir = \"ltr\" ``` ## 处理 minItemsToShowInTagCloud 参数 minItemsToShowInTagCloud 同时控制了侧边栏中系列、标签、分类中文章的最少数量，如果minItemsToShowInTagCloud=2，那么只有当系列、标签、分类中的文章数量至少为 2 的时候才会显示在侧边栏 ![image-20231124152211998](image-20231124152211998.png) 进行修改，让 minItemsToShowInTagCloud 控制标签，新增 minItemsToShowInCategoriesCloud 控制分类，新增 minItemsToShowInSeriesCloud 控制分类， 修改 layouts/partials/taxonomy/taxonomy-categories.html 里面的 minItemsToShowInTagCloud 为 minItemsToShowInCategoriesCloud 修改 layouts/partials/taxonomy/taxonomy-series.html 里面的 minItemsToShowInTagCloud 为 minItemsToShowInSeriesCloud 同时在 param.toml 添加 ```toml minItemsToShowInSeriesCloud = 5 minItemsToShowInCategoriesCloud = 3 ``` 在系列、标签、分类后面添加上相关的值，也就是配置文件里面 minItemsToShowInSeriesCloud 、 minItemsToShowInTagCloud 、minItemsToShowInCategoriesCloud 的值 ![image-20231124160836736](image-20231124160836736.png) 修改 layouts/partials/taxonomy/taxonomy-series.html 文件，在 {{ i18n \"series\" }} 后面添加上如下： ```html {{ with .Site.Params.minItemsToShowInSeriesCloud }} ({{ . }}) {{ end }} ``` 其它的 taxonomy-categories.html 、taxonomy-tags.html 文件同理 ## 修改文章标题间距 在 _custom.scss 添加如下内容： ```scss .single__contents h2{ margin: 3rem 0 1.5rem !important; } .single__contents h3 { margin: 2rem 0 1.25rem !important; } ``` ## 修改字体 添加 data/font.toml，内容如下： ```toml title_font = \"\\\"LXGWWenKaiScreen\\\", sans-serif\" content_font = \"\\\"LXGWWenKaiScreen\\\", sans-serif\" ``` 添加 assets\\scss\\font.css 文件，内容如下： ```css @font-face { font-family: 'LXGWWenKaiScreen'; src: url('../fonts/LXGWWenKaiScreen.ttf'); font-style: normal; } ``` 最后在 params.toml 文件中引入 font.css ## 修改手机下间距 ![image-20231128072748010](image-20231128072748010.png) 在 _custom.scss 添加如下内容： ```scss @media only screen and (max-width: 769px) { .caption { margin-top: 0.5rem !important; } .summary-classic__text { margin-top: 0.5rem !important; } } ``` ## 手机下允许在单词内换行 ![image-20231128081857088](image-20231128081857088.png) 在 _custom.scss 添加如下内容： ```scss @media only screen and (max-width: 769px) { .single__contents p { word-break: break-all; } } ``` ## 修改 archive 页细节 在 _custom.scss 添加如下内容： ```scss .archive__type { padding-left: 5px; padding-right: 5px;\t} @media only screen and (min-width: 769px) { .archive__meta{ margin-top: 2.5px; } } .archive__key { width: 120px !important; } .archive__meta { min-width: 120px !important; max-width: 120px !important; } .archive__type { max-width: 70px !important; min-width: 70px !important;\t} ``` ## 修改手机下的显示问题 ![image-20231204224759758](image-20231204224759758.png) 对其修改，希望超出的部分不换行，而是左右滑动，在 _custom.scss 添加如下内容： ```scss @media only screen and (max-width: 769px) { .summary-classic__content{ overflow-x: auto; scrollbar-width: none; -ms-overflow-style: none; white-space: nowrap; } .summary-classic__content::-webkit-scrollbar { display: none; } } ``` 添加后如下，可以左右欢动，但是摘要部分被截断了 ![image-20231204225132577](image-20231204225132577.png) 这是因为我们之前在_custom.scss 添加了如下内容：` ```scss .summary-classic__text { overflow:hidden; text-overflow:ellipsis; display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; } ``` 将其修改为如下即可 ```scss @media only screen and (min-width: 769px) { .summary-classic__text { overflow:hidden; text-overflow:ellipsis; display:-webkit-box; -webkit-line-clamp:2; -webkit-box-orient:vertical; } } ``` 修改后最终显示如下： ![image-20231204225318221](image-20231204225318221.png) ## 一些可能用到的 css 调整整体页面大小 ```css body{ zoom:1.15 !important; } ``` ## 添加about页面（标签墙） 添加 layouts\\\\_default\\tags-wall.html ```html {{ define \"main\" }} {{ end }} ``` 引入 static/js/tags-wall.js ```js ;(function () { const Color = { format (color) { if (color[0] === '#') { return Utils.Color.switch16toRGB(color) } else if (color.indexOf('rgb') === 0) { return color } else { return Utils.Color.switch16toRGB('#' + color) } }, switch16toRGB (color) { const r = parseInt(color.slice(1, 3), 16) const g = parseInt(color.slice(3, 5), 16) const b = parseInt(color.slice(5, 7), 16) return `rgb(${r},${g},${b})` }, getRGB (rgbColor) { return rgbColor.match(/rgb\\((\\d+),(\\d+),(\\d+)\\)/).slice(1) }, getGeryLevel (rgbColor) { const [R, G, B] = Utils.Color.getRGB(rgbColor) return R * 0.299 + G * 0.587 + B * 0.114 }, isDeep (rgbColor) { return Utils.Color.getGeryLevel(rgbColor) \u003e= 192 } } const DOM = { setStyle (dom, styles) { if (!dom) return for (let sKey in styles) { dom.style[sKey] = styles[sKey] } }, create (tagName, properties) { const $ = document.createElement(tagName) if (properties.style) { DOM.setStyle($, properties.style) } for (const key in properties) { $[key] = properties[key] } return $ } } const Debounce = (time) =\u003e { let timer return { exec (fn) { clearTimeout(timer) timer = setTimeout(fn, time) }, cancel () { clearTimeout(timer) } } } const Shuffle = (arr) =\u003e arr.map(v =\u003e ({ v, sort: Math.random()})).sort((a, b) =\u003e a.sort - b.sort).map(v =\u003e v.v) window.Utils = { Color, DOM, Debounce, Shuffle } })() const Tags = ({ style, text, rootDOM }) =\u003e { style = style || { fn: Style1 } rootDOM = rootDOM || document.body if (!text) { throw new Error('need text') } /* Basic */ const $tags = Utils.DOM.create('div', { id: 'my-tags' }) const $style = document.createElement('style') rootDOM.append($style, $tags) const preprocess = (txt) =\u003e { return txt.split('\\n').slice(0, -1) .filter(item =\u003e item.indexOf('//') !== 0 \u0026\u0026 item !== '') .map(item =\u003e item.split('/').slice(0, 3).concat([item.split('/').slice(3).join('/')])) } const render = (data) =\u003e { data.forEach(item =\u003e $tags.innerHTML += genMarkHTML(item)) } const genMarkHTML = (item) =\u003e { const [tag, score, type, link] = item const a = (text, link) =\u003e `${text}` Math.random() const randNum = Math.random() const computedScore = score || (style.randomScoreIfNoSetting ? Math.ceil(randNum * 10) : 5) return ` ${link ? a(tag, link) : tag} ` } const filter = (data, type) =\u003e data.filter(item =\u003e item[2] === type) const Data = Utils.Shuffle(preprocess(text)) render(Data) style.rootDOM = rootDOM style.fn(Data, document.getElementsByTagName('mark'), $tags, $style, style) } const Style1 = (data, marks, $tags, $style, Config) =\u003e { marks = Array.prototype.slice.call(marks) Config.scale = Config.scale || 1 Utils.DOM.setStyle(Config.rootDOM, { position: 'relative', overflowX: 'hidden' }) // const Size = [2.5, 3.5, 4.3, 5.1, 5.8, 6.5, 7, 7.5, 8, 8.4, 8.8] const Size = [2.5, 3.2, 3.9, 4.5, 5.1, 5.6, 6.1, 6.5, 6.9, 7.3, 7.7] const Color = (Array.isArray(Config.color) ? Config.color : [ '#e5e6e9', '#e5e6e9', '#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9','#e5e6e9' ]).map(color =\u003e Utils.Color.format(color)) const FontSize = (size) =\u003e size * 5 * Config.scale const getIntFromRand = (rand, end) =\u003e Math.floor(parseFloat(rand) * end) const genBgColor = (randNum) =\u003e Color[getIntFromRand(randNum, Color.length)] const genCSS = () =\u003e { const genStyle = (index) =\u003e `.score-${index} { font-size: ${FontSize(Size[index])}px }` return Array.from(Array(11)).map((_, i) =\u003e genStyle(i)).join('\\n') } const genFontColor = (rgbBgColor) =\u003e Utils.Color.isDeep(rgbBgColor) ? '#555' : '#fff' const $bg = document.createElement('div') Utils.DOM.setStyle($bg, { position: 'absolute', zIndex: '1', fontSize: 11 * Config.scale + 'rem', color: '#26262e30', display: 'flex', justifyContent: 'center', alignItems: 'center', width: '100%', height: '100%', top: '0', left: '0' }) $bg.innerText = Config.title Config.rootDOM.appendChild($bg) const debounce = Utils.Debounce(200) marks.forEach($e =\u003e { const bgColor = genBgColor(parseFloat($e.dataset.rand)) Math.random() Utils.DOM.setStyle($e, { backgroundColor: bgColor, color: genFontColor(bgColor), top: getIntFromRand(Math.random(), 90, Math.random()) + '%', left: getIntFromRand(Math.random(), 85) + '%', zIndex: (11 - $e.dataset.score).toString() }) Utils.DOM.setStyle($e.getElementsByTagName('a')[0], { color: genFontColor(bgColor), textDecoration: 'none' }) if (Config.animation) { setTimeout(() =\u003e { Utils.DOM.setStyle($e, { animation: `${Math.random() \u003e 0.5 ? 'float' : 'float-reverse'} ${Math.random() * 5 + 7}s linear infinite` }) }, 5000 * Math.random()) } $e.onmouseover = () =\u003e { debounce.exec(() =\u003e { const curType = $e.dataset.type marks.forEach(mark =\u003e { if (curType \u0026\u0026 mark.dataset.type === curType) { mark.style.opacity = 1 mark.style.zIndex = 10 + parseInt(mark.style.zIndex) $bg.innerText = curType } else { mark.style.opacity = .1 } }) $e.style.opacity = 1 $e.style.zIndex = 21 }) } $e.onmouseout = () =\u003e { debounce.cancel() marks.forEach(mark =\u003e { mark.style.opacity = .8 mark.style.zIndex = 11 - mark.dataset.score }) $bg.innerText = Config.title } }) $style.innerHTML = genCSS() + ` #my-tags { overflow-x: hidden; padding: 7%; text-align: center; width: 100%; height: 100%; position: relative; box-sizing: border-box; z-index: 2;} #my-tags a::after { content: \"🎐\"; } #my-tags a:hover::after { animation: move .3s linear infinite; position: relative; } #my-tags mark { position: absolute; padding: .3em .4em; display: inline-block; border-radius: em; margin: .2em .3em .5em .5em; opacity: .8; transition: opacity .2s; box-shadow: 0.3px 0.5px 5px #111;border-style: double;} @media (max-width: 1000px) { #my-tags mark { animation: none !important; } } @media (max-width: 600px) { #my-tags mark { position: unset; } html { overflow-x: hidden; font-size: 10px; } } @keyframes move { 0% { left: 0px } 50% { left: 1% } 100 { left: 0px } } @keyframes float { 0% { transform: translatey(0px) rotate(0deg); } 15% { transform: translatey(-3%) rotate(4deg); } 30% { transform: translatey(-5%) rotate(7deg); } 45% { transform: translatey(-2%) rotate(4deg); } 60% { transform: translatey(2%) rotate(-2deg); } 75% { transform: translatey(5%) rotate(-6deg); } 90% { transform: translatey(3%) rotate(-3deg); } 100% { transform: translatey(0px) rotate(0deg); } } @keyframes float-reverse { 0% { transform: translatey(0px) rotate(0deg); } 15% { transform: translatey(3%) rotate(-4deg); } 30% { transform: translatey(5%) rotate(-7deg); } 45% { transform: translatey(2%) rotate(-4deg); } 60% { transform: translatey(-2%) rotate(2deg); } 75% { transform: translatey(-5%) rotate(6deg); } 90% { transform: translatey(-3%) rotate(3deg); } 100% { transform: translatey(0px) rotate(0deg); } } ` } ``` ## 添加强调 shortcode 在 layouts\\shortcodes 添加 mark.html 如下： ```html {{ $color := .Get \"color\" }} {{ .Inner }} ``` 示例如下： 示例文字1 示例文字1 示例文字1 示例文字1 ## 插入豆瓣电影页 添加 layouts\\\\_default\\movies.html ，内容如下： ```html {{ define \"main\" }} {{.Title}} {{$items := getCSV \",\" \"static/movie.csv\" }} 全部 {{range $year := (seq now.Year -1 2012)}} {{$year}} {{end}} 全部 五星 四星 三星 二星 一星 零星 时间排序 评分排序 {{range $idx,$item := $items}} {{if ne $idx 0}} {{ $rating := float (index $item 6)}} {{ $coverSrc := index $item 5 }} {{ $douURL := replaceRE \"https://movie.douban.com/subject/([0-9]+)/\" \"https://dou.img.lithub.cc/movie/$1.jpg\" $coverSrc}} {{$rating}} {{ index $item 1 }} {{end}} {{end}} {{ end }} ``` 然后添加 content\\movies.md ## markdown语法增强 在 _custom.js 中添加如下： ```js // 获取所有 元素下的 元素 const blockquotePs = document.querySelectorAll('blockquote p'); // 遍历每个 元素 blockquotePs.forEach(item =\u003e { let _innerHtml = item.innerHTML; // 检查是否以 '::' 开头 if (_innerHtml.indexOf('::') === 0) { // 设置父节点的 class 为 'oh-essay' item.parentNode.setAttribute('class', 'oh-essay'); // 将当前 元素替换为包含在 中的内容 item.outerHTML = `${_innerHtml.slice(2)}`; } }); ``` 在 _custom.scss 中添加如下 ```scss .oh-essay { \u0026:before { content: '💭'; //'💭'; //'💬'; //'🗨️'; float: left; padding-right: 8px; } background: #cccfd465; } ``` 这样当输入 `\u003e::` 的时候显示如下： \u003e ::注意 ## 添加notice表情包 在 shortcodes 文件夹下添加 notice.html ，内容如下： ```html {{.Inner}} ``` 效果： 注意事项 ## 代码块折叠 添加 codeblock.js 代码，内容如下： ```js document.addEventListener('DOMContentLoaded', () =\u003e { CodeBlock.init(); }); const CodeBlock = { maxHeight: 450, // px maxLines: 20, initCodeBlockOverflowY: function (overflowHeight) { overflowHeight = overflowHeight || CodeBlock.maxHeight; const codeBlocks = document.querySelectorAll('.highlight'); codeBlocks.forEach((codeBlock) =\u003e { const chromaElement = codeBlock.querySelector('.chroma'); const originalHeight = chromaElement.offsetHeight; const lines = codeBlock.getElementsByClassName('line'); const numLines = lines.length; //console.log('未折叠前行数：', numLines);\tif (numLines \u003e CodeBlock.maxLines) { chromaElement.style.maxHeight = overflowHeight + 'px'; chromaElement.style.overflow = 'hidden'; const showMoreDiv = document.createElement('div'); showMoreDiv.style.cssText = 'text-align: center;margin-top: -18px;cursor: pointer;'; showMoreDiv.innerHTML = ''; showMoreDiv.querySelector('i').style.color = '#a19e98';\t//修改箭头图标颜色\tcodeBlock.appendChild(showMoreDiv); showMoreDiv.addEventListener('click', function () { if (showMoreDiv.innerHTML.indexOf('fa-angles-down') \u003e 0) { chromaElement.style.maxHeight = originalHeight + 'px'; showMoreDiv.innerHTML = ''; } else { chromaElement.style.maxHeight = overflowHeight + 'px'; showMoreDiv.innerHTML = ''; showMoreDiv.querySelector('i').style.color = '#a19e98';\t//修改箭头图标颜色\t} }); } }); }, init: function () { this.initCodeBlockOverflowY(); } }; ``` 然后引入 all.min.css 并且在 static 文件夹里面添加 webfonts 文件夹来实现 Font Awesome 的图标显示 ## 修改手机archive页面 ![image-20231208225345743](image-20231208225345743.png) 修改 left 属性即可调整位置 ![image-20231208232207600](image-20231208232207600.png) 在 _custom.scss 中添加如下： ```scss @media only screen and (max-width: 768px) { .archive__title:hover[data-dir=\"ltr\"]::before, .archive__title:active[data-dir=\"ltr\"]::before, .archive__title:focus[data-dir=\"ltr\"]::before{ left: 68px !important;\t} } @media only screen and (max-width: 768px) { .theme__light .archive__title:hover[data-dir=\"ltr\"]::before, .theme__light .archive__title:active[data-dir=\"ltr\"]::before, .theme__light .archive__title:focus[data-dir=\"ltr\"]::before { top: 12px !important;\t} } ``` 修改后如下： ![image-20231208232533209](image-20231208232533209.png) ## 文章加密 待实现 ","description":"本文主要记录 zzo 主题的修复以及一些优化","id":5,"section":"hugo","tags":["hugo"],"title":"博客优化","uri":"https://ayuxy.github.io/zh/hugo/2023-1120-01/"}]